name: Vercel Preview Deployment
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

on:
  pull_request:
    # branches-ignore:
    #   - main
    branches:
      - development
  # workflow_run:
  #   workflows: [Run Tests]
  #   types:
  #     - completed
jobs:
  Deploy-Preview:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # - name: Install dependencies
      #   run: npm install -g pnpm
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      # - name: delete alias
      #   run: vercel alias rm preview.waverd.com --token=${{ secrets.VERCEL_TOKEN }} --yes
      # - name: Delete Preview Deployment
      #   run: vercel remove ${{ vars.CLIENT_URL }} --token=${{ secrets.VERCEL_TOKEN }}
      # - name: Build Project Artifacts
      #   run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      # - name: Deploy Project Artifacts to Vercel
      #   run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        # url="$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})"
        # vercel alias --token=${{ secrets.VERCEL_TOKEN }} set "$url" preview.waverd.com
        run: |
          url=https://wave-research-7j18vu4qo-waverd.vercel.app

          CURR_DEPLOYMENT=$(curl -s -G \
            -H "Authorization: Bearer ${{secrets.VERCEL_TOKEN}}" \
            "https://api.vercel.com/v6/deployments/${url}")

          echo "e: $CURR_DEPLOYMENT ${CURR_DEPLOYMENT}"


          curl -s -X \
            -H "Authorization: Bearer ${{secrets.VERCEL_TOKEN}}" \
            "https://api.vercel.com/v2/deployments/$CURR_DEPLOYMENT.id/aliases?teamId=${{secrets.VERCEL_ORG_ID}}" \
            --data-urlencode "alias=preview.waverd.com"

# name: Vercel Preview Deployment

# # env:
# #   VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
# #   VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
# #   VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

# # permissions:
# #   contents: read
# #   statuses: write
# #   pull-requests: write

# # on:
# #   pull_request:
# #     types:
# #       - opened
# #       - synchronize

# # jobs:
# #   deploy-preview:
# #     runs-on: ubuntu-latest
# #     steps:
# #       - uses: actions/checkout@v2

# #       - name: Extract branch name
# #         shell: bash
# #         run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
# #         id: extract_branch

# #       - name: Hash branch name
# #         uses: pplanel/hash-calculator-action@v1.3.1
# #         id: hash_branch
# #         with:
# #           input: ${{ steps.extract_branch.outputs.branch }}
# #           method: MD5

# #       - name: Install dependencies
# #         run: npm install -g pnpm

# #       - name: Install Vercel CLI
# #         run: npm install --global vercel@latest

# #       # - name: Cache dependencies
# #       #   uses: actions/cache@v2
# #       #   id: cache-npm
# #       #   with:
# #       #     path: ~/.npm
# #       #     key: npm-${{ hashFiles('package-lock.json') }}
# #       #     restore-keys: npm-

# #       # - name: Install dependencies
# #       #   if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
# #       #   run: npm ci --ignore-scripts

# #       - name: Pull Vercel Environment Information
# #         run: vercel pull --yes --environment=preview --token=$VERCEL_TOKEN

# #       - name: Deploy Project Artifacts to Vercel
# #         id: vercel
# #         env:
# #           META_TAG: ${{ steps.hash_branch.outputs.digest }}-${{ github.run_number }}-${{ github.run_attempt}}
# #         run: |
# #           vercel --version
# #           vercel pull --yes --environment=preview --token=$VERCEL_TOKEN
# #           vercel build --token=$VERCEL_TOKEN
# #           vercel deploy --prebuilt --archive=tgz --token=$VERCEL_TOKEN --meta base_hash=${{ env.META_TAG }}

# #           vercel ls --token=$VERCEL_TOKEN --meta base_hash=${{ env.META_TAG }} &> vercel-output
# #           url=$(cat vercel-output | grep http | awk '{print $2}')
# #           echo "New preview URL: $url"
# #           echo "META_TAG=$META_TAG"
# #           echo "VERCEL_URL=$url" >> "$GITHUB_OUTPUT"

# #       - uses: mshick/add-pr-comment@v2
# #         with:
# #           message: |
# #             Your build has completed!

# #             [Preview deployment](${{ steps.vercel.outputs.VERCEL_URL }})
